=begin
#My Data My Consent - Developer API

#Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

The version of the OpenAPI document: v1
Contact: support@mydatamyconsent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module MyDataMyConsent
  class SupportedIdentifiersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all supported identifiers by country.
    # Get all supported identifiers by country.
    # @param country_iso2_code [String] Country ISO 2 code.
    # @param [Hash] opts the optional parameters
    # @return [SupportedIdentifier]
    def get_all_supported_identifiers(country_iso2_code, opts = {})
      data, _status_code, _headers = get_all_supported_identifiers_with_http_info(country_iso2_code, opts)
      data
    end

    # Get all supported identifiers by country.
    # Get all supported identifiers by country.
    # @param country_iso2_code [String] Country ISO 2 code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportedIdentifier, Integer, Hash)>] SupportedIdentifier data, response status code and response headers
    def get_all_supported_identifiers_with_http_info(country_iso2_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportedIdentifiersApi.get_all_supported_identifiers ...'
      end
      # verify the required parameter 'country_iso2_code' is set
      if @api_client.config.client_side_validation && country_iso2_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2_code' when calling SupportedIdentifiersApi.get_all_supported_identifiers"
      end
      # resource path
      local_var_path = '/v1/supported-identifiers/{countryIso2Code}'.sub('{' + 'countryIso2Code' + '}', CGI.escape(country_iso2_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SupportedIdentifier'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SupportedIdentifiersApi.get_all_supported_identifiers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportedIdentifiersApi#get_all_supported_identifiers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
