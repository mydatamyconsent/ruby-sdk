=begin
#My Data My Consent - Developer API

#Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

The version of the OpenAPI document: v1
Contact: support@mydatamyconsent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module MyDataMyConsent
  class DataConsentRequestsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Revoke / Cancel the ConsentRequest based on Id.
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Boolean]
    def cancel_consent_request(request_id, opts = {})
      data, _status_code, _headers = cancel_consent_request_with_http_info(request_id, opts)
      data
    end

    # Revoke / Cancel the ConsentRequest based on Id.
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def cancel_consent_request_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentRequestsApi.cancel_consent_request ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling DataConsentRequestsApi.cancel_consent_request"
      end
      # resource path
      local_var_path = '/v1/consent-requests/{requestId}/cancel'.sub('{' + 'requestId' + '}', CGI.escape(request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentRequestsApi.cancel_consent_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentRequestsApi#cancel_consent_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a consent request.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentRequestModel] :data_consent_request_model MyDataMyConsent.Models.Consents.DataConsentRequestModel.
    # @return [Boolean]
    def create_request(opts = {})
      data, _status_code, _headers = create_request_with_http_info(opts)
      data
    end

    # Create a consent request.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentRequestModel] :data_consent_request_model MyDataMyConsent.Models.Consents.DataConsentRequestModel.
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def create_request_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentRequestsApi.create_request ...'
      end
      # resource path
      local_var_path = '/v1/consent-requests'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'data_consent_request_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentRequestsApi.create_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentRequestsApi#create_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Consent Requests sent to Individuals.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [DataConsentStatus] :status 
    # @return [Object]
    def get_all_consent_requests_to_individuals(opts = {})
      data, _status_code, _headers = get_all_consent_requests_to_individuals_with_http_info(opts)
      data
    end

    # Get all Consent Requests sent to Individuals.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [DataConsentStatus] :status 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_all_consent_requests_to_individuals_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentRequestsApi.get_all_consent_requests_to_individuals ...'
      end
      # resource path
      local_var_path = '/v1/consent-requests/individuals'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentRequestsApi.get_all_consent_requests_to_individuals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentRequestsApi#get_all_consent_requests_to_individuals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Consent Requests sent to Organizations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [DataConsentStatus] :status 
    # @return [Object]
    def get_all_consent_requests_to_organizations(opts = {})
      data, _status_code, _headers = get_all_consent_requests_to_organizations_with_http_info(opts)
      data
    end

    # Get All Consent Requests sent to Organizations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [DataConsentStatus] :status 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_all_consent_requests_to_organizations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentRequestsApi.get_all_consent_requests_to_organizations ...'
      end
      # resource path
      local_var_path = '/v1/consent-requests/organizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentRequestsApi.get_all_consent_requests_to_organizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentRequestsApi#get_all_consent_requests_to_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Consent Request by ID.
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataConsentDetailsDto]
    def get_individual_consent_request_by_id(request_id, opts = {})
      data, _status_code, _headers = get_individual_consent_request_by_id_with_http_info(request_id, opts)
      data
    end

    # Get a Consent Request by ID.
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentDetailsDto, Integer, Hash)>] DataConsentDetailsDto data, response status code and response headers
    def get_individual_consent_request_by_id_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentRequestsApi.get_individual_consent_request_by_id ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling DataConsentRequestsApi.get_individual_consent_request_by_id"
      end
      # resource path
      local_var_path = '/v1/consent-requests/individuals/{requestId}'.sub('{' + 'requestId' + '}', CGI.escape(request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDetailsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentRequestsApi.get_individual_consent_request_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentRequestsApi#get_individual_consent_request_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a OrganizationConsent Request by Id
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataConsentDetailsDto]
    def get_organization_consent_request_by_id(request_id, opts = {})
      data, _status_code, _headers = get_organization_consent_request_by_id_with_http_info(request_id, opts)
      data
    end

    # Get a OrganizationConsent Request by Id
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentDetailsDto, Integer, Hash)>] DataConsentDetailsDto data, response status code and response headers
    def get_organization_consent_request_by_id_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentRequestsApi.get_organization_consent_request_by_id ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling DataConsentRequestsApi.get_organization_consent_request_by_id"
      end
      # resource path
      local_var_path = '/v1/consent-requests/organizations/{requestId}'.sub('{' + 'requestId' + '}', CGI.escape(request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDetailsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentRequestsApi.get_organization_consent_request_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentRequestsApi#get_organization_consent_request_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
