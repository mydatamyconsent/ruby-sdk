=begin
#My Data My Consent - Developer API

#Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

The version of the OpenAPI document: 1.0
Contact: support@mydatamyconsent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module MyDataMyConsent
  class OrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all consent requests sent to Organizations.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status 
    # @option opts [Time] :from_date_time 
    # @option opts [Time] :to_date_time 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [PaginatedListOfOrganizationConsentRequestDetailss]
    def v1_organizations_consent_requests_get(opts = {})
      data, _status_code, _headers = v1_organizations_consent_requests_get_with_http_info(opts)
      data
    end

    # Get all consent requests sent to Organizations.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status 
    # @option opts [Time] :from_date_time 
    # @option opts [Time] :to_date_time 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [Array<(PaginatedListOfOrganizationConsentRequestDetailss, Integer, Hash)>] PaginatedListOfOrganizationConsentRequestDetailss data, response status code and response headers
    def v1_organizations_consent_requests_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consent_requests_get ...'
      end
      # resource path
      local_var_path = '/v1/organizations/consent-requests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'from_date_time'] = opts[:'from_date_time'] if !opts[:'from_date_time'].nil?
      query_params[:'to_date_time'] = opts[:'to_date_time'] if !opts[:'to_date_time'].nil?
      query_params[:'page_no'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListOfOrganizationConsentRequestDetailss'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consent_requests_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consent_requests_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create consent request for an Organization.
    # @param create_consent_request [CreateConsentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationConsentRequestDetails]
    def v1_organizations_consent_requests_post(create_consent_request, opts = {})
      data, _status_code, _headers = v1_organizations_consent_requests_post_with_http_info(create_consent_request, opts)
      data
    end

    # Create consent request for an Organization.
    # @param create_consent_request [CreateConsentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationConsentRequestDetails, Integer, Hash)>] OrganizationConsentRequestDetails data, response status code and response headers
    def v1_organizations_consent_requests_post_with_http_info(create_consent_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consent_requests_post ...'
      end
      # verify the required parameter 'create_consent_request' is set
      if @api_client.config.client_side_validation && create_consent_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_consent_request' when calling OrganizationsApi.v1_organizations_consent_requests_post"
      end
      # resource path
      local_var_path = '/v1/organizations/consent-requests'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_consent_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationConsentRequestDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consent_requests_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consent_requests_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel the  Organization data request by id.
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Boolean]
    def v1_organizations_consent_requests_request_id_cancel_put(request_id, opts = {})
      data, _status_code, _headers = v1_organizations_consent_requests_request_id_cancel_put_with_http_info(request_id, opts)
      data
    end

    # Cancel the  Organization data request by id.
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def v1_organizations_consent_requests_request_id_cancel_put_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consent_requests_request_id_cancel_put ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling OrganizationsApi.v1_organizations_consent_requests_request_id_cancel_put"
      end
      # resource path
      local_var_path = '/v1/organizations/consent-requests/{request_id}/cancel'.sub('{' + 'request_id' + '}', CGI.escape(request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consent_requests_request_id_cancel_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consent_requests_request_id_cancel_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Organization data request by id.
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConsentRequest]
    def v1_organizations_consent_requests_request_id_get(request_id, opts = {})
      data, _status_code, _headers = v1_organizations_consent_requests_request_id_get_with_http_info(request_id, opts)
      data
    end

    # Get Organization data request by id.
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsentRequest, Integer, Hash)>] ConsentRequest data, response status code and response headers
    def v1_organizations_consent_requests_request_id_get_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consent_requests_request_id_get ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling OrganizationsApi.v1_organizations_consent_requests_request_id_get"
      end
      # resource path
      local_var_path = '/v1/organizations/consent-requests/{request_id}'.sub('{' + 'request_id' + '}', CGI.escape(request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConsentRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consent_requests_request_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consent_requests_request_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the paginated list of organization consent templates.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [PaginatedListOfConsentRequestTemplates]
    def v1_organizations_consent_templates_get(opts = {})
      data, _status_code, _headers = v1_organizations_consent_templates_get_with_http_info(opts)
      data
    end

    # Get the paginated list of organization consent templates.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [Array<(PaginatedListOfConsentRequestTemplates, Integer, Hash)>] PaginatedListOfConsentRequestTemplates data, response status code and response headers
    def v1_organizations_consent_templates_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consent_templates_get ...'
      end
      # resource path
      local_var_path = '/v1/organizations/consent-templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_no'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListOfConsentRequestTemplates'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consent_templates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consent_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Organization consent template details by consent id.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationConsentRequestTemplateDetails]
    def v1_organizations_consent_templates_template_id_get(template_id, opts = {})
      data, _status_code, _headers = v1_organizations_consent_templates_template_id_get_with_http_info(template_id, opts)
      data
    end

    # Get Organization consent template details by consent id.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationConsentRequestTemplateDetails, Integer, Hash)>] OrganizationConsentRequestTemplateDetails data, response status code and response headers
    def v1_organizations_consent_templates_template_id_get_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consent_templates_template_id_get ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling OrganizationsApi.v1_organizations_consent_templates_template_id_get"
      end
      # resource path
      local_var_path = '/v1/organizations/consent-templates/{template_id}'.sub('{' + 'template_id' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationConsentRequestTemplateDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consent_templates_template_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consent_templates_template_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Organization consent document by document id.
    # @param consent_id [String] 
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def v1_organizations_consents_consent_id_documents_document_id_download_get(consent_id, document_id, opts = {})
      data, _status_code, _headers = v1_organizations_consents_consent_id_documents_document_id_download_get_with_http_info(consent_id, document_id, opts)
      data
    end

    # Download Organization consent document by document id.
    # @param consent_id [String] 
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def v1_organizations_consents_consent_id_documents_document_id_download_get_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consents_consent_id_documents_document_id_download_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_documents_document_id_download_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_documents_document_id_download_get"
      end
      # resource path
      local_var_path = '/v1/organizations/consents/{consent_id}/documents/{document_id}/download'.sub('{' + 'consent_id' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consents_consent_id_documents_document_id_download_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consents_consent_id_documents_document_id_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Organization consent document based on document id and consent id.
    # @param consent_id [String] 
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConsentedDocument]
    def v1_organizations_consents_consent_id_documents_document_id_get(consent_id, document_id, opts = {})
      data, _status_code, _headers = v1_organizations_consents_consent_id_documents_document_id_get_with_http_info(consent_id, document_id, opts)
      data
    end

    # Get Organization consent document based on document id and consent id.
    # @param consent_id [String] 
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsentedDocument, Integer, Hash)>] ConsentedDocument data, response status code and response headers
    def v1_organizations_consents_consent_id_documents_document_id_get_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consents_consent_id_documents_document_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_documents_document_id_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_documents_document_id_get"
      end
      # resource path
      local_var_path = '/v1/organizations/consents/{consent_id}/documents/{document_id}'.sub('{' + 'consent_id' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConsentedDocument'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consents_consent_id_documents_document_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consents_consent_id_documents_document_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Organization consent document by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ConsentedDocument>]
    def v1_organizations_consents_consent_id_documents_get(consent_id, opts = {})
      data, _status_code, _headers = v1_organizations_consents_consent_id_documents_get_with_http_info(consent_id, opts)
      data
    end

    # Get Organization consent document by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ConsentedDocument>, Integer, Hash)>] Array<ConsentedDocument> data, response status code and response headers
    def v1_organizations_consents_consent_id_documents_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consents_consent_id_documents_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_documents_get"
      end
      # resource path
      local_var_path = '/v1/organizations/consents/{consent_id}/documents'.sub('{' + 'consent_id' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ConsentedDocument>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consents_consent_id_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consents_consent_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization consented financial account details.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [FinancialAccount]
    def v1_organizations_consents_consent_id_financial_accounts_account_id_get(consent_id, account_id, opts = {})
      data, _status_code, _headers = v1_organizations_consents_consent_id_financial_accounts_account_id_get_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get organization consented financial account details.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FinancialAccount, Integer, Hash)>] FinancialAccount data, response status code and response headers
    def v1_organizations_consents_consent_id_financial_accounts_account_id_get_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_account_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_account_id_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_account_id_get"
      end
      # resource path
      local_var_path = '/v1/organizations/consents/{consent_id}/financial-accounts/{account_id}'.sub('{' + 'consent_id' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FinancialAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consents_consent_id_financial_accounts_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization consented financial account transactions.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters 
    # @option opts [String] :from_date_time 
    # @option opts [String] :to_date_time 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [PaginatedListOfFinancialAccountTransactions]
    def v1_organizations_consents_consent_id_financial_accounts_account_id_transactions_get(consent_id, account_id, opts = {})
      data, _status_code, _headers = v1_organizations_consents_consent_id_financial_accounts_account_id_transactions_get_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get organization consented financial account transactions.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters 
    # @option opts [String] :from_date_time 
    # @option opts [String] :to_date_time 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [Array<(PaginatedListOfFinancialAccountTransactions, Integer, Hash)>] PaginatedListOfFinancialAccountTransactions data, response status code and response headers
    def v1_organizations_consents_consent_id_financial_accounts_account_id_transactions_get_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_account_id_transactions_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_account_id_transactions_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_account_id_transactions_get"
      end
      # resource path
      local_var_path = '/v1/organizations/consents/{consent_id}/financial-accounts/{account_id}/transactions'.sub('{' + 'consent_id' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?
      query_params[:'from_date_time'] = opts[:'from_date_time'] if !opts[:'from_date_time'].nil?
      query_params[:'to_date_time'] = opts[:'to_date_time'] if !opts[:'to_date_time'].nil?
      query_params[:'page_no'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListOfFinancialAccountTransactions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_account_id_transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consents_consent_id_financial_accounts_account_id_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all organization consented financial accounts.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<FinancialAccount>]
    def v1_organizations_consents_consent_id_financial_accounts_get(consent_id, opts = {})
      data, _status_code, _headers = v1_organizations_consents_consent_id_financial_accounts_get_with_http_info(consent_id, opts)
      data
    end

    # Get all organization consented financial accounts.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FinancialAccount>, Integer, Hash)>] Array<FinancialAccount> data, response status code and response headers
    def v1_organizations_consents_consent_id_financial_accounts_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_get"
      end
      # resource path
      local_var_path = '/v1/organizations/consents/{consent_id}/financial-accounts'.sub('{' + 'consent_id' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FinancialAccount>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consents_consent_id_financial_accounts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consents_consent_id_financial_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Organization consent request details by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConsentDetails]
    def v1_organizations_consents_consent_id_get(consent_id, opts = {})
      data, _status_code, _headers = v1_organizations_consents_consent_id_get_with_http_info(consent_id, opts)
      data
    end

    # Get Organization consent request details by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsentDetails, Integer, Hash)>] ConsentDetails data, response status code and response headers
    def v1_organizations_consents_consent_id_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consents_consent_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling OrganizationsApi.v1_organizations_consents_consent_id_get"
      end
      # resource path
      local_var_path = '/v1/organizations/consents/{consent_id}'.sub('{' + 'consent_id' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConsentDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consents_consent_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consents_consent_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the paginated list of Organization consents.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status 
    # @option opts [Time] :from_date_time 
    # @option opts [Time] :to_date_time 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [PaginatedListOfConsents]
    def v1_organizations_consents_get(opts = {})
      data, _status_code, _headers = v1_organizations_consents_get_with_http_info(opts)
      data
    end

    # Get the paginated list of Organization consents.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status 
    # @option opts [Time] :from_date_time 
    # @option opts [Time] :to_date_time 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [Array<(PaginatedListOfConsents, Integer, Hash)>] PaginatedListOfConsents data, response status code and response headers
    def v1_organizations_consents_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_consents_get ...'
      end
      # resource path
      local_var_path = '/v1/organizations/consents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'from_date_time'] = opts[:'from_date_time'] if !opts[:'from_date_time'].nil?
      query_params[:'to_date_time'] = opts[:'to_date_time'] if !opts[:'to_date_time'].nil?
      query_params[:'page_no'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListOfConsents'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_consents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_consents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue a new document to an organization.
    # @param document_issue_request [DocumentIssueRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DocumentIssueRequestDetails]
    def v1_organizations_documents_issue_post(document_issue_request, opts = {})
      data, _status_code, _headers = v1_organizations_documents_issue_post_with_http_info(document_issue_request, opts)
      data
    end

    # Issue a new document to an organization.
    # @param document_issue_request [DocumentIssueRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentIssueRequestDetails, Integer, Hash)>] DocumentIssueRequestDetails data, response status code and response headers
    def v1_organizations_documents_issue_post_with_http_info(document_issue_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_documents_issue_post ...'
      end
      # verify the required parameter 'document_issue_request' is set
      if @api_client.config.client_side_validation && document_issue_request.nil?
        fail ArgumentError, "Missing the required parameter 'document_issue_request' when calling OrganizationsApi.v1_organizations_documents_issue_post"
      end
      # resource path
      local_var_path = '/v1/organizations/documents/issue'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(document_issue_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentIssueRequestDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_documents_issue_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_documents_issue_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a document for issuance request of Organization.
    # @param issue_request_id [String] 
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @return [UploadDocumentResponse]
    def v1_organizations_documents_issue_upload_issue_request_id_post(issue_request_id, file, opts = {})
      data, _status_code, _headers = v1_organizations_documents_issue_upload_issue_request_id_post_with_http_info(issue_request_id, file, opts)
      data
    end

    # Upload a document for issuance request of Organization.
    # @param issue_request_id [String] 
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadDocumentResponse, Integer, Hash)>] UploadDocumentResponse data, response status code and response headers
    def v1_organizations_documents_issue_upload_issue_request_id_post_with_http_info(issue_request_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_documents_issue_upload_issue_request_id_post ...'
      end
      # verify the required parameter 'issue_request_id' is set
      if @api_client.config.client_side_validation && issue_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_request_id' when calling OrganizationsApi.v1_organizations_documents_issue_upload_issue_request_id_post"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling OrganizationsApi.v1_organizations_documents_issue_upload_issue_request_id_post"
      end
      # resource path
      local_var_path = '/v1/organizations/documents/issue/upload/{issue_request_id}'.sub('{' + 'issue_request_id' + '}', CGI.escape(issue_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UploadDocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_documents_issue_upload_issue_request_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_documents_issue_upload_issue_request_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get issued document.
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [IssuedDocument]
    def v1_organizations_documents_issued_document_id_get(document_id, opts = {})
      data, _status_code, _headers = v1_organizations_documents_issued_document_id_get_with_http_info(document_id, opts)
      data
    end

    # Get issued document.
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssuedDocument, Integer, Hash)>] IssuedDocument data, response status code and response headers
    def v1_organizations_documents_issued_document_id_get_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_documents_issued_document_id_get ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling OrganizationsApi.v1_organizations_documents_issued_document_id_get"
      end
      # resource path
      local_var_path = '/v1/organizations/documents/issued/{document_id}'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssuedDocument'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_documents_issued_document_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_documents_issued_document_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get paginated list of issued documents of given document type.
    # @param document_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :from_date_time 
    # @option opts [Time] :to_date_time 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [PaginatedListOfIssuedDocuments]
    def v1_organizations_documents_issued_get(document_type_id, opts = {})
      data, _status_code, _headers = v1_organizations_documents_issued_get_with_http_info(document_type_id, opts)
      data
    end

    # Get paginated list of issued documents of given document type.
    # @param document_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :from_date_time 
    # @option opts [Time] :to_date_time 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [Array<(PaginatedListOfIssuedDocuments, Integer, Hash)>] PaginatedListOfIssuedDocuments data, response status code and response headers
    def v1_organizations_documents_issued_get_with_http_info(document_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_documents_issued_get ...'
      end
      # verify the required parameter 'document_type_id' is set
      if @api_client.config.client_side_validation && document_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_type_id' when calling OrganizationsApi.v1_organizations_documents_issued_get"
      end
      # resource path
      local_var_path = '/v1/organizations/documents/issued'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'document_type_id'] = document_type_id
      query_params[:'from_date_time'] = opts[:'from_date_time'] if !opts[:'from_date_time'].nil?
      query_params[:'to_date_time'] = opts[:'to_date_time'] if !opts[:'to_date_time'].nil?
      query_params[:'page_no'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListOfIssuedDocuments'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_documents_issued_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_documents_issued_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get paginated list of registered document types.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [PaginatedListOfDocumentTypes]
    def v1_organizations_documents_types_get(opts = {})
      data, _status_code, _headers = v1_organizations_documents_types_get_with_http_info(opts)
      data
    end

    # Get paginated list of registered document types.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [Array<(PaginatedListOfDocumentTypes, Integer, Hash)>] PaginatedListOfDocumentTypes data, response status code and response headers
    def v1_organizations_documents_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.v1_organizations_documents_types_get ...'
      end
      # resource path
      local_var_path = '/v1/organizations/documents/types'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_no'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListOfDocumentTypes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.v1_organizations_documents_types_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#v1_organizations_documents_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
