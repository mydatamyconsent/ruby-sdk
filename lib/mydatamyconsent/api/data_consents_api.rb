=begin
#My Data My Consent - Developer API

#Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

The version of the OpenAPI document: v1
Contact: support@mydatamyconsent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module MyDataMyConsent
  class DataConsentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get analysis of a consented document.
    # @param consent_id [String] Data consent id.
    # @param document_id [String] Consented document Id.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_consented_document_analysis(consent_id, document_id, opts = {})
      download_consented_document_analysis_with_http_info(consent_id, document_id, opts)
      nil
    end

    # Get analysis of a consented document.
    # @param consent_id [String] Data consent id.
    # @param document_id [String] Consented document Id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_consented_document_analysis_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.download_consented_document_analysis ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.download_consented_document_analysis"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.download_consented_document_analysis"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/documents/{documentId}/analysis'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.download_consented_document_analysis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#download_consented_document_analysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download individual consented document by document id.
    # @param consent_id [String] Individual data consent id.
    # @param document_id [String] Consented document id.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_individual_consented_document_by_id(consent_id, document_id, opts = {})
      download_individual_consented_document_by_id_with_http_info(consent_id, document_id, opts)
      nil
    end

    # Download individual consented document by document id.
    # @param consent_id [String] Individual data consent id.
    # @param document_id [String] Consented document id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_individual_consented_document_by_id_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.download_individual_consented_document_by_id ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.download_individual_consented_document_by_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.download_individual_consented_document_by_id"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/documents/{documentId}/download'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.download_individual_consented_document_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#download_individual_consented_document_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download organization consent document based on document id.
    # @param consent_id [String] Organization data consent id.
    # @param document_id [String] Organization consented document Id.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_organization_consented_document_by_id(consent_id, document_id, opts = {})
      download_organization_consented_document_by_id_with_http_info(consent_id, document_id, opts)
      nil
    end

    # Download organization consent document based on document id.
    # @param consent_id [String] Organization data consent id.
    # @param document_id [String] Organization consented document Id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_organization_consented_document_by_id_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.download_organization_consented_document_by_id ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.download_organization_consented_document_by_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.download_organization_consented_document_by_id"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/documents/{documentId}/download'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.download_organization_consented_document_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#download_organization_consented_document_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all individual consented financial accounts.
    # @param consent_id [String] Consent id.
    # @param [Hash] opts the optional parameters
    # @return [DataConsentFinancialsDto]
    def get_all_consented_financial_accounts(consent_id, opts = {})
      data, _status_code, _headers = get_all_consented_financial_accounts_with_http_info(consent_id, opts)
      data
    end

    # Get all individual consented financial accounts.
    # @param consent_id [String] Consent id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentFinancialsDto, Integer, Hash)>] DataConsentFinancialsDto data, response status code and response headers
    def get_all_consented_financial_accounts_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_all_consented_financial_accounts ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_all_consented_financial_accounts"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/financial-accounts'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentFinancialsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_all_consented_financial_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_all_consented_financial_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all organizational consented financial accounts.
    # @param consent_id [String] Consent id.
    # @param [Hash] opts the optional parameters
    # @return [DataConsentFinancialsDto]
    def get_consent_financial_accounts(consent_id, opts = {})
      data, _status_code, _headers = get_consent_financial_accounts_with_http_info(consent_id, opts)
      data
    end

    # Get all organizational consented financial accounts.
    # @param consent_id [String] Consent id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentFinancialsDto, Integer, Hash)>] DataConsentFinancialsDto data, response status code and response headers
    def get_consent_financial_accounts_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_consent_financial_accounts ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_consent_financial_accounts"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/financial-accounts'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentFinancialsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_consent_financial_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_consent_financial_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get individual consented financial account details based on account id.
    # @param consent_id [String] Consent id.
    # @param account_id [String] Account id.
    # @param [Hash] opts the optional parameters
    # @return [FinancialAccount]
    def get_consented_account_by_id(consent_id, account_id, opts = {})
      data, _status_code, _headers = get_consented_account_by_id_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get individual consented financial account details based on account id.
    # @param consent_id [String] Consent id.
    # @param account_id [String] Account id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FinancialAccount, Integer, Hash)>] FinancialAccount data, response status code and response headers
    def get_consented_account_by_id_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_consented_account_by_id ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_consented_account_by_id"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.get_consented_account_by_id"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/financial-accounts/{accountId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FinancialAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_consented_account_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_consented_account_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get individual consented document by document id.
    # @param consent_id [String] Individual data consent id.
    # @param document_id [String] Consented document id.
    # @param [Hash] opts the optional parameters
    # @return [DataConsentDocument]
    def get_consented_document_by_id(consent_id, document_id, opts = {})
      data, _status_code, _headers = get_consented_document_by_id_with_http_info(consent_id, document_id, opts)
      data
    end

    # Get individual consented document by document id.
    # @param consent_id [String] Individual data consent id.
    # @param document_id [String] Consented document id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentDocument, Integer, Hash)>] DataConsentDocument data, response status code and response headers
    def get_consented_document_by_id_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_consented_document_by_id ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_consented_document_by_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.get_consented_document_by_id"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/documents/{documentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDocument'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_consented_document_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_consented_document_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization consented financial account details based on account id.
    # @param consent_id [String] Consent id.
    # @param account_id [String] Account id.
    # @param [Hash] opts the optional parameters
    # @return [OrganizationFinancialAccountDto]
    def get_consented_financial_account(consent_id, account_id, opts = {})
      data, _status_code, _headers = get_consented_financial_account_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get organization consented financial account details based on account id.
    # @param consent_id [String] Consent id.
    # @param account_id [String] Account id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationFinancialAccountDto, Integer, Hash)>] OrganizationFinancialAccountDto data, response status code and response headers
    def get_consented_financial_account_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_consented_financial_account ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_consented_financial_account"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.get_consented_financial_account"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/financial-accounts/{accountId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationFinancialAccountDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_consented_financial_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_consented_financial_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get consented financial account insights.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_consented_financial_account_insights(consent_id, account_id, opts = {})
      get_consented_financial_account_insights_with_http_info(consent_id, account_id, opts)
      nil
    end

    # Get consented financial account insights.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_consented_financial_account_insights_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_consented_financial_account_insights ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_consented_financial_account_insights"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.get_consented_financial_account_insights"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/financial-accounts/{accountId}/insights'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_consented_financial_account_insights",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_consented_financial_account_insights\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get individual consented financial account transactions of an individual based on accountId.
    # @param consent_id [String] Consent id.
    # @param account_id [String] Account id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Filters.
    # @option opts [Time] :from_date_time_utc From date time in utc timezone.
    # @option opts [Time] :to_date_time_utc Til date time in utc timezone.
    # @option opts [Integer] :page_no Page number. (default to 10)
    # @option opts [Integer] :page_size Number of items to return. (default to 25)
    # @return [UserAccountFinancialTransactionsDtoPaginatedList]
    def get_consented_financial_account_transactions(consent_id, account_id, opts = {})
      data, _status_code, _headers = get_consented_financial_account_transactions_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get individual consented financial account transactions of an individual based on accountId.
    # @param consent_id [String] Consent id.
    # @param account_id [String] Account id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Filters.
    # @option opts [Time] :from_date_time_utc From date time in utc timezone.
    # @option opts [Time] :to_date_time_utc Til date time in utc timezone.
    # @option opts [Integer] :page_no Page number.
    # @option opts [Integer] :page_size Number of items to return.
    # @return [Array<(UserAccountFinancialTransactionsDtoPaginatedList, Integer, Hash)>] UserAccountFinancialTransactionsDtoPaginatedList data, response status code and response headers
    def get_consented_financial_account_transactions_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_consented_financial_account_transactions ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_consented_financial_account_transactions"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.get_consented_financial_account_transactions"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/financial-accounts/{accountId}/transactions'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?
      query_params[:'fromDateTimeUtc'] = opts[:'from_date_time_utc'] if !opts[:'from_date_time_utc'].nil?
      query_params[:'toDateTimeUtc'] = opts[:'to_date_time_utc'] if !opts[:'to_date_time_utc'].nil?
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserAccountFinancialTransactionsDtoPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_consented_financial_account_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_consented_financial_account_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the paginated list of individual data consents.
    # GetIndividualDataConsents
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status Data consent status.
    # @option opts [Time] :from_date_time From datetime in UTC timezone.
    # @option opts [Time] :to_date_time To datetime in UTC timezone.
    # @option opts [Integer] :page_no Page number. (default to 1)
    # @option opts [Integer] :page_size Number of items to return. (default to 25)
    # @return [DataConsentDetailsPaginatedList]
    def get_consents(opts = {})
      data, _status_code, _headers = get_consents_with_http_info(opts)
      data
    end

    # Get the paginated list of individual data consents.
    # GetIndividualDataConsents
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status Data consent status.
    # @option opts [Time] :from_date_time From datetime in UTC timezone.
    # @option opts [Time] :to_date_time To datetime in UTC timezone.
    # @option opts [Integer] :page_no Page number.
    # @option opts [Integer] :page_size Number of items to return.
    # @return [Array<(DataConsentDetailsPaginatedList, Integer, Hash)>] DataConsentDetailsPaginatedList data, response status code and response headers
    def get_consents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_consents ...'
      end
      # resource path
      local_var_path = '/v1/consents/individuals'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'fromDateTime'] = opts[:'from_date_time'] if !opts[:'from_date_time'].nil?
      query_params[:'toDateTime'] = opts[:'to_date_time'] if !opts[:'to_date_time'].nil?
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDetailsPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_consents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_consents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get individual consented documents by consent id.
    # @param consent_id [String] Individual data consent id.
    # @param [Hash] opts the optional parameters
    # @return [Array<DataConsentDocument>]
    def get_individual_consented_documents(consent_id, opts = {})
      data, _status_code, _headers = get_individual_consented_documents_with_http_info(consent_id, opts)
      data
    end

    # Get individual consented documents by consent id.
    # @param consent_id [String] Individual data consent id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DataConsentDocument>, Integer, Hash)>] Array<DataConsentDocument> data, response status code and response headers
    def get_individual_consented_documents_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_individual_consented_documents ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_individual_consented_documents"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/documents'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DataConsentDocument>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_individual_consented_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_individual_consented_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get individuals data consent details by consent id.
    # @param consent_id [String] Individual data consent id.
    # @param [Hash] opts the optional parameters
    # @return [DataConsent]
    def get_individual_data_consent_by_id(consent_id, opts = {})
      data, _status_code, _headers = get_individual_data_consent_by_id_with_http_info(consent_id, opts)
      data
    end

    # Get individuals data consent details by consent id.
    # @param consent_id [String] Individual data consent id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsent, Integer, Hash)>] DataConsent data, response status code and response headers
    def get_individual_data_consent_by_id_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_individual_data_consent_by_id ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_individual_data_consent_by_id"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsent'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_individual_data_consent_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_individual_data_consent_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization consented financial account transactions of an individual based on accountId.
    # @param consent_id [String] Consent id.
    # @param account_id [String] Account id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Filters.
    # @option opts [Time] :from_date_time_utc From date time in utc timezone.
    # @option opts [Time] :to_date_time_utc Til date time in utc timezone.
    # @option opts [Integer] :page_no Page number. (default to 1)
    # @option opts [Integer] :page_size Number of items to return. (default to 25)
    # @return [OrganizationFinancialTransactionsDtoPaginatedList]
    def get_org_consented_account_transactions(consent_id, account_id, opts = {})
      data, _status_code, _headers = get_org_consented_account_transactions_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get organization consented financial account transactions of an individual based on accountId.
    # @param consent_id [String] Consent id.
    # @param account_id [String] Account id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Filters.
    # @option opts [Time] :from_date_time_utc From date time in utc timezone.
    # @option opts [Time] :to_date_time_utc Til date time in utc timezone.
    # @option opts [Integer] :page_no Page number.
    # @option opts [Integer] :page_size Number of items to return.
    # @return [Array<(OrganizationFinancialTransactionsDtoPaginatedList, Integer, Hash)>] OrganizationFinancialTransactionsDtoPaginatedList data, response status code and response headers
    def get_org_consented_account_transactions_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_org_consented_account_transactions ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_org_consented_account_transactions"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.get_org_consented_account_transactions"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/financial-accounts/{accountId}/transactions'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?
      query_params[:'fromDateTimeUtc'] = opts[:'from_date_time_utc'] if !opts[:'from_date_time_utc'].nil?
      query_params[:'toDateTimeUtc'] = opts[:'to_date_time_utc'] if !opts[:'to_date_time_utc'].nil?
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationFinancialTransactionsDtoPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_org_consented_account_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_org_consented_account_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization consent document based on document id.
    # @param consent_id [String] Organization data consent id.
    # @param document_id [String] Organization consented document Id.
    # @param [Hash] opts the optional parameters
    # @return [DataConsentDocument]
    def get_organization_consented_document_by_id(consent_id, document_id, opts = {})
      data, _status_code, _headers = get_organization_consented_document_by_id_with_http_info(consent_id, document_id, opts)
      data
    end

    # Get organization consent document based on document id.
    # @param consent_id [String] Organization data consent id.
    # @param document_id [String] Organization consented document Id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentDocument, Integer, Hash)>] DataConsentDocument data, response status code and response headers
    def get_organization_consented_document_by_id_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_organization_consented_document_by_id ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_organization_consented_document_by_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.get_organization_consented_document_by_id"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/documents/{documentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDocument'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_organization_consented_document_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_organization_consented_document_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization consented documents by consent id.
    # @param consent_id [String] Organization data consent id.
    # @param [Hash] opts the optional parameters
    # @return [Array<DataConsentDocument>]
    def get_organization_consented_documents(consent_id, opts = {})
      data, _status_code, _headers = get_organization_consented_documents_with_http_info(consent_id, opts)
      data
    end

    # Get organization consented documents by consent id.
    # @param consent_id [String] Organization data consent id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DataConsentDocument>, Integer, Hash)>] Array<DataConsentDocument> data, response status code and response headers
    def get_organization_consented_documents_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_organization_consented_documents ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_organization_consented_documents"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/documents'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DataConsentDocument>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_organization_consented_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_organization_consented_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organizations data consent details by consent id.
    # @param consent_id [String] Organization data consent id.
    # @param [Hash] opts the optional parameters
    # @return [DataConsent]
    def get_organization_data_consent_by_id(consent_id, opts = {})
      data, _status_code, _headers = get_organization_data_consent_by_id_with_http_info(consent_id, opts)
      data
    end

    # Get organizations data consent details by consent id.
    # @param consent_id [String] Organization data consent id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsent, Integer, Hash)>] DataConsent data, response status code and response headers
    def get_organization_data_consent_by_id_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_organization_data_consent_by_id ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.get_organization_data_consent_by_id"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsent'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_organization_data_consent_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_organization_data_consent_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the paginated list of organization data consents.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status Data consent status.
    # @option opts [Time] :from_date_time From datetime in UTC timezone.
    # @option opts [Time] :to_date_time To datetime in UTC timezone.
    # @option opts [Integer] :page_no Page number. (default to 1)
    # @option opts [Integer] :page_size Number of items to return. (default to 25)
    # @return [DataConsentDetailsPaginatedList]
    def get_organization_data_consents(opts = {})
      data, _status_code, _headers = get_organization_data_consents_with_http_info(opts)
      data
    end

    # Get the paginated list of organization data consents.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status Data consent status.
    # @option opts [Time] :from_date_time From datetime in UTC timezone.
    # @option opts [Time] :to_date_time To datetime in UTC timezone.
    # @option opts [Integer] :page_no Page number.
    # @option opts [Integer] :page_size Number of items to return.
    # @return [Array<(DataConsentDetailsPaginatedList, Integer, Hash)>] DataConsentDetailsPaginatedList data, response status code and response headers
    def get_organization_data_consents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.get_organization_data_consents ...'
      end
      # resource path
      local_var_path = '/v1/consents/organizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'fromDateTime'] = opts[:'from_date_time'] if !opts[:'from_date_time'].nil?
      query_params[:'toDateTime'] = opts[:'to_date_time'] if !opts[:'to_date_time'].nil?
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDetailsPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.get_organization_data_consents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#get_organization_data_consents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
