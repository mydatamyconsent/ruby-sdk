=begin
#My Data My Consent - Developer API

#Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

The version of the OpenAPI document: v1
Contact: support@mydatamyconsent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module MyDataMyConsent
  class DataConsentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get individual consented financial account details based on account id.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [FinancialAccount]
    def v1_consents_individuals_consent_id_accounts_account_id_get(consent_id, account_id, opts = {})
      data, _status_code, _headers = v1_consents_individuals_consent_id_accounts_account_id_get_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get individual consented financial account details based on account id.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FinancialAccount, Integer, Hash)>] FinancialAccount data, response status code and response headers
    def v1_consents_individuals_consent_id_accounts_account_id_get_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_individuals_consent_id_accounts_account_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_accounts_account_id_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_accounts_account_id_get"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/accounts/{accountId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FinancialAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_individuals_consent_id_accounts_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_individuals_consent_id_accounts_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get consented financial account transactions of an individual based on accountId.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [Time] :from_date 
    # @option opts [Time] :to_date 
    # @return [UserAccountFinancialTransactionsDtoPaginatedList]
    def v1_consents_individuals_consent_id_accounts_account_id_transactions_get(consent_id, account_id, opts = {})
      data, _status_code, _headers = v1_consents_individuals_consent_id_accounts_account_id_transactions_get_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get consented financial account transactions of an individual based on accountId.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [Time] :from_date 
    # @option opts [Time] :to_date 
    # @return [Array<(UserAccountFinancialTransactionsDtoPaginatedList, Integer, Hash)>] UserAccountFinancialTransactionsDtoPaginatedList data, response status code and response headers
    def v1_consents_individuals_consent_id_accounts_account_id_transactions_get_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_individuals_consent_id_accounts_account_id_transactions_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_accounts_account_id_transactions_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_accounts_account_id_transactions_get"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/accounts/{accountId}/transactions'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserAccountFinancialTransactionsDtoPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_individuals_consent_id_accounts_account_id_transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_individuals_consent_id_accounts_account_id_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all individual financial accounts in a consent.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataConsentFinancialsDto]
    def v1_consents_individuals_consent_id_accounts_get(consent_id, opts = {})
      data, _status_code, _headers = v1_consents_individuals_consent_id_accounts_get_with_http_info(consent_id, opts)
      data
    end

    # Get all individual financial accounts in a consent.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentFinancialsDto, Integer, Hash)>] DataConsentFinancialsDto data, response status code and response headers
    def v1_consents_individuals_consent_id_accounts_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_individuals_consent_id_accounts_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_accounts_get"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/accounts'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentFinancialsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_individuals_consent_id_accounts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_individuals_consent_id_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a individuals consented document.
    # @param consent_id [String] consentId.
    # @param document_id [String] documentId.
    # @param [Hash] opts the optional parameters
    # @return [UserDocumentDownloadDto]
    def v1_consents_individuals_consent_id_documents_document_id_download_get(consent_id, document_id, opts = {})
      data, _status_code, _headers = v1_consents_individuals_consent_id_documents_document_id_download_get_with_http_info(consent_id, document_id, opts)
      data
    end

    # Download a individuals consented document.
    # @param consent_id [String] consentId.
    # @param document_id [String] documentId.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserDocumentDownloadDto, Integer, Hash)>] UserDocumentDownloadDto data, response status code and response headers
    def v1_consents_individuals_consent_id_documents_document_id_download_get_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_individuals_consent_id_documents_document_id_download_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_documents_document_id_download_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_documents_document_id_download_get"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/documents/{documentId}/download'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserDocumentDownloadDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_individuals_consent_id_documents_document_id_download_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_individuals_consent_id_documents_document_id_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get individuals consent document based on document id.
    # @param consent_id [String] 
    # @param document_id [String] Document Id.
    # @param [Hash] opts the optional parameters
    # @return [UserDocumentDetailsDto]
    def v1_consents_individuals_consent_id_documents_document_id_get(consent_id, document_id, opts = {})
      data, _status_code, _headers = v1_consents_individuals_consent_id_documents_document_id_get_with_http_info(consent_id, document_id, opts)
      data
    end

    # Get individuals consent document based on document id.
    # @param consent_id [String] 
    # @param document_id [String] Document Id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserDocumentDetailsDto, Integer, Hash)>] UserDocumentDetailsDto data, response status code and response headers
    def v1_consents_individuals_consent_id_documents_document_id_get_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_individuals_consent_id_documents_document_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_documents_document_id_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_documents_document_id_get"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/documents/{documentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserDocumentDetailsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_individuals_consent_id_documents_document_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_individuals_consent_id_documents_document_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the individual documents based on ConsentId.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataConsentDocumentsDto]
    def v1_consents_individuals_consent_id_documents_get(consent_id, opts = {})
      data, _status_code, _headers = v1_consents_individuals_consent_id_documents_get_with_http_info(consent_id, opts)
      data
    end

    # Get the individual documents based on ConsentId.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentDocumentsDto, Integer, Hash)>] DataConsentDocumentsDto data, response status code and response headers
    def v1_consents_individuals_consent_id_documents_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_individuals_consent_id_documents_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_documents_get"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}/documents'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDocumentsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_individuals_consent_id_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_individuals_consent_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get individuals consent details by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataConsentDetailsDto]
    def v1_consents_individuals_consent_id_get(consent_id, opts = {})
      data, _status_code, _headers = v1_consents_individuals_consent_id_get_with_http_info(consent_id, opts)
      data
    end

    # Get individuals consent details by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentDetailsDto, Integer, Hash)>] DataConsentDetailsDto data, response status code and response headers
    def v1_consents_individuals_consent_id_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_individuals_consent_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_individuals_consent_id_get"
      end
      # resource path
      local_var_path = '/v1/consents/individuals/{consentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDetailsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_individuals_consent_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_individuals_consent_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of Consents Sent to Individuals.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [DataConsentStatus] :status 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [UserDataConsentInfoDtoPaginatedList]
    def v1_consents_individuals_get(opts = {})
      data, _status_code, _headers = v1_consents_individuals_get_with_http_info(opts)
      data
    end

    # Get the list of Consents Sent to Individuals.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [DataConsentStatus] :status 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<(UserDataConsentInfoDtoPaginatedList, Integer, Hash)>] UserDataConsentInfoDtoPaginatedList data, response status code and response headers
    def v1_consents_individuals_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_individuals_get ...'
      end
      # resource path
      local_var_path = '/v1/consents/individuals'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserDataConsentInfoDtoPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_individuals_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_individuals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get orgnization consented financial account details based on account id.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationFinancialAccountDto]
    def v1_consents_organizations_consent_id_accounts_account_id_get(consent_id, account_id, opts = {})
      data, _status_code, _headers = v1_consents_organizations_consent_id_accounts_account_id_get_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get orgnization consented financial account details based on account id.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationFinancialAccountDto, Integer, Hash)>] OrganizationFinancialAccountDto data, response status code and response headers
    def v1_consents_organizations_consent_id_accounts_account_id_get_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_organizations_consent_id_accounts_account_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_accounts_account_id_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_accounts_account_id_get"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/accounts/{accountId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationFinancialAccountDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_organizations_consent_id_accounts_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_organizations_consent_id_accounts_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get consented financial account transactions of an organization based on accountId.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [Time] :from_date 
    # @option opts [Time] :to_date 
    # @return [OrganizationFinancialTransactionsDtoPaginatedList]
    def v1_consents_organizations_consent_id_accounts_account_id_transactions_get(consent_id, account_id, opts = {})
      data, _status_code, _headers = v1_consents_organizations_consent_id_accounts_account_id_transactions_get_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get consented financial account transactions of an organization based on accountId.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters 
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [Time] :from_date 
    # @option opts [Time] :to_date 
    # @return [Array<(OrganizationFinancialTransactionsDtoPaginatedList, Integer, Hash)>] OrganizationFinancialTransactionsDtoPaginatedList data, response status code and response headers
    def v1_consents_organizations_consent_id_accounts_account_id_transactions_get_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_organizations_consent_id_accounts_account_id_transactions_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_accounts_account_id_transactions_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_accounts_account_id_transactions_get"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/accounts/{accountId}/transactions'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationFinancialTransactionsDtoPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_organizations_consent_id_accounts_account_id_transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_organizations_consent_id_accounts_account_id_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all organizational financial accounts in a consent.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataConsentFinancialsDto]
    def v1_consents_organizations_consent_id_accounts_get(consent_id, opts = {})
      data, _status_code, _headers = v1_consents_organizations_consent_id_accounts_get_with_http_info(consent_id, opts)
      data
    end

    # Get all organizational financial accounts in a consent.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentFinancialsDto, Integer, Hash)>] DataConsentFinancialsDto data, response status code and response headers
    def v1_consents_organizations_consent_id_accounts_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_organizations_consent_id_accounts_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_accounts_get"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/accounts'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentFinancialsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_organizations_consent_id_accounts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_organizations_consent_id_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download organizations consented document.
    # @param consent_id [String] 
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationDocumentDownloadDto]
    def v1_consents_organizations_consent_id_documents_document_id_download_get(consent_id, document_id, opts = {})
      data, _status_code, _headers = v1_consents_organizations_consent_id_documents_document_id_download_get_with_http_info(consent_id, document_id, opts)
      data
    end

    # Download organizations consented document.
    # @param consent_id [String] 
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationDocumentDownloadDto, Integer, Hash)>] OrganizationDocumentDownloadDto data, response status code and response headers
    def v1_consents_organizations_consent_id_documents_document_id_download_get_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_organizations_consent_id_documents_document_id_download_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_documents_document_id_download_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_documents_document_id_download_get"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/documents/{documentId}/download'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationDocumentDownloadDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_organizations_consent_id_documents_document_id_download_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_organizations_consent_id_documents_document_id_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organizations consent document based on document id.
    # @param consent_id [String] 
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationDocumentDetailsDto]
    def v1_consents_organizations_consent_id_documents_document_id_get(consent_id, document_id, opts = {})
      data, _status_code, _headers = v1_consents_organizations_consent_id_documents_document_id_get_with_http_info(consent_id, document_id, opts)
      data
    end

    # Get organizations consent document based on document id.
    # @param consent_id [String] 
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationDocumentDetailsDto, Integer, Hash)>] OrganizationDocumentDetailsDto data, response status code and response headers
    def v1_consents_organizations_consent_id_documents_document_id_get_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_organizations_consent_id_documents_document_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_documents_document_id_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_documents_document_id_get"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/documents/{documentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationDocumentDetailsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_organizations_consent_id_documents_document_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_organizations_consent_id_documents_document_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the organizations documents based on ConsentId.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataConsentDocumentsDto]
    def v1_consents_organizations_consent_id_documents_get(consent_id, opts = {})
      data, _status_code, _headers = v1_consents_organizations_consent_id_documents_get_with_http_info(consent_id, opts)
      data
    end

    # Get the organizations documents based on ConsentId.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentDocumentsDto, Integer, Hash)>] DataConsentDocumentsDto data, response status code and response headers
    def v1_consents_organizations_consent_id_documents_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_organizations_consent_id_documents_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_documents_get"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}/documents'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDocumentsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_organizations_consent_id_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_organizations_consent_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organizations consent details by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataConsentDetailsDto]
    def v1_consents_organizations_consent_id_get(consent_id, opts = {})
      data, _status_code, _headers = v1_consents_organizations_consent_id_get_with_http_info(consent_id, opts)
      data
    end

    # Get organizations consent details by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataConsentDetailsDto, Integer, Hash)>] DataConsentDetailsDto data, response status code and response headers
    def v1_consents_organizations_consent_id_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_organizations_consent_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_organizations_consent_id_get"
      end
      # resource path
      local_var_path = '/v1/consents/organizations/{consentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataConsentDetailsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_organizations_consent_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_organizations_consent_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of data consents sent for organizations.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [DataConsentStatus] :status 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [OrganizationDataConsentInfoDtoPaginatedList]
    def v1_consents_organizations_get(opts = {})
      data, _status_code, _headers = v1_consents_organizations_get_with_http_info(opts)
      data
    end

    # Get the list of data consents sent for organizations.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @option opts [DataConsentStatus] :status 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<(OrganizationDataConsentInfoDtoPaginatedList, Integer, Hash)>] OrganizationDataConsentInfoDtoPaginatedList data, response status code and response headers
    def v1_consents_organizations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_organizations_get ...'
      end
      # resource path
      local_var_path = '/v1/consents/organizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNo'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationDataConsentInfoDtoPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_organizations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_organizations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
