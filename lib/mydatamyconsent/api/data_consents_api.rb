=begin
#My Data My Consent - Developer API

#Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

The version of the OpenAPI document: v1
Contact: support@mydatamyconsent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module MyDataMyConsent
  class DataConsentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get consented financial account details.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_consents_consent_id_accounts_account_id_get(consent_id, account_id, opts = {})
      data, _status_code, _headers = v1_consents_consent_id_accounts_account_id_get_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get consented financial account details.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_consent_id_accounts_account_id_get_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_consent_id_accounts_account_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_consent_id_accounts_account_id_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.v1_consents_consent_id_accounts_account_id_get"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/accounts/{accountId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_consent_id_accounts_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_consent_id_accounts_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get consented financial account insights.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_consents_consent_id_accounts_account_id_insights_get(consent_id, account_id, opts = {})
      data, _status_code, _headers = v1_consents_consent_id_accounts_account_id_insights_get_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get consented financial account insights.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_consent_id_accounts_account_id_insights_get_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_consent_id_accounts_account_id_insights_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_consent_id_accounts_account_id_insights_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.v1_consents_consent_id_accounts_account_id_insights_get"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/accounts/{accountId}/insights'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_consent_id_accounts_account_id_insights_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_consent_id_accounts_account_id_insights_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get consented financial account transactions.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters 
    # @option opts [Time] :from_date 
    # @option opts [Time] :to_date 
    # @return [Object]
    def v1_consents_consent_id_accounts_account_id_transactions_get(consent_id, account_id, opts = {})
      data, _status_code, _headers = v1_consents_consent_id_accounts_account_id_transactions_get_with_http_info(consent_id, account_id, opts)
      data
    end

    # Get consented financial account transactions.
    # @param consent_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters 
    # @option opts [Time] :from_date 
    # @option opts [Time] :to_date 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_consent_id_accounts_account_id_transactions_get_with_http_info(consent_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_consent_id_accounts_account_id_transactions_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_consent_id_accounts_account_id_transactions_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataConsentsApi.v1_consents_consent_id_accounts_account_id_transactions_get"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/accounts/{accountId}/transactions'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_consent_id_accounts_account_id_transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_consent_id_accounts_account_id_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all accounts in a consent.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_consents_consent_id_accounts_get(consent_id, opts = {})
      data, _status_code, _headers = v1_consents_consent_id_accounts_get_with_http_info(consent_id, opts)
      data
    end

    # Get all accounts in a consent.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_consent_id_accounts_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_consent_id_accounts_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_consent_id_accounts_get"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/accounts'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_consent_id_accounts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_consent_id_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get analysis of a consented document.
    # @param consent_id [String] 
    # @param document_id [String] Document Id.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_consents_consent_id_documents_document_id_analysis_get(consent_id, document_id, opts = {})
      data, _status_code, _headers = v1_consents_consent_id_documents_document_id_analysis_get_with_http_info(consent_id, document_id, opts)
      data
    end

    # Get analysis of a consented document.
    # @param consent_id [String] 
    # @param document_id [String] Document Id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_consent_id_documents_document_id_analysis_get_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_consent_id_documents_document_id_analysis_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_consent_id_documents_document_id_analysis_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.v1_consents_consent_id_documents_document_id_analysis_get"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/documents/{documentId}/analysis'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_consent_id_documents_document_id_analysis_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_consent_id_documents_document_id_analysis_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a consented document.
    # @param consent_id [String] 
    # @param document_id [String] Document Id.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_consents_consent_id_documents_document_id_download_get(consent_id, document_id, opts = {})
      data, _status_code, _headers = v1_consents_consent_id_documents_document_id_download_get_with_http_info(consent_id, document_id, opts)
      data
    end

    # Download a consented document.
    # @param consent_id [String] 
    # @param document_id [String] Document Id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_consent_id_documents_document_id_download_get_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_consent_id_documents_document_id_download_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_consent_id_documents_document_id_download_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.v1_consents_consent_id_documents_document_id_download_get"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/documents/{documentId}/download'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_consent_id_documents_document_id_download_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_consent_id_documents_document_id_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get consented document details.
    # @param consent_id [String] 
    # @param document_id [String] Document Id.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_consents_consent_id_documents_document_id_get(consent_id, document_id, opts = {})
      data, _status_code, _headers = v1_consents_consent_id_documents_document_id_get_with_http_info(consent_id, document_id, opts)
      data
    end

    # Get consented document details.
    # @param consent_id [String] 
    # @param document_id [String] Document Id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_consent_id_documents_document_id_get_with_http_info(consent_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_consent_id_documents_document_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_consent_id_documents_document_id_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DataConsentsApi.v1_consents_consent_id_documents_document_id_get"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/documents/{documentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_consent_id_documents_document_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_consent_id_documents_document_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all documents in a consent.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_consents_consent_id_documents_get(consent_id, opts = {})
      data, _status_code, _headers = v1_consents_consent_id_documents_get_with_http_info(consent_id, opts)
      data
    end

    # Get all documents in a consent.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_consent_id_documents_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_consent_id_documents_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_consent_id_documents_get"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}/documents'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_consent_id_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_consent_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get consent details by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_consents_consent_id_get(consent_id, opts = {})
      data, _status_code, _headers = v1_consents_consent_id_get_with_http_info(consent_id, opts)
      data
    end

    # Get consent details by consent id.
    # @param consent_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_consent_id_get_with_http_info(consent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_consent_id_get ...'
      end
      # verify the required parameter 'consent_id' is set
      if @api_client.config.client_side_validation && consent_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_id' when calling DataConsentsApi.v1_consents_consent_id_get"
      end
      # resource path
      local_var_path = '/v1/consents/{consentId}'.sub('{' + 'consentId' + '}', CGI.escape(consent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_consent_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_consent_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all consents filtered by status and time.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus.
    # @option opts [Time] :start_date System.DateTime.
    # @option opts [Time] :end_date till dateSystem.DateTime.
    # @return [Object]
    def v1_consents_get(opts = {})
      data, _status_code, _headers = v1_consents_get_with_http_info(opts)
      data
    end

    # Get all consents filtered by status and time.
    # @param [Hash] opts the optional parameters
    # @option opts [DataConsentStatus] :status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus.
    # @option opts [Time] :start_date System.DateTime.
    # @option opts [Time] :end_date till dateSystem.DateTime.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_consents_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataConsentsApi.v1_consents_get ...'
      end
      # resource path
      local_var_path = '/v1/consents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataConsentsApi.v1_consents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataConsentsApi#v1_consents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
