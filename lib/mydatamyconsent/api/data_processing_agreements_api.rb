=begin
#My Data My Consent - Developer API

#Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

The version of the OpenAPI document: 1.0
Contact: support@mydatamyconsent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module MyDataMyConsent
  class DataProcessingAgreementsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get paginated data processing agreements.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [PaginatedListOfDataProcessingAgreements]
    def v1_data_agreements_get(opts = {})
      data, _status_code, _headers = v1_data_agreements_get_with_http_info(opts)
      data
    end

    # Get paginated data processing agreements.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_no 
    # @option opts [Integer] :page_size 
    # @return [Array<(PaginatedListOfDataProcessingAgreements, Integer, Hash)>] PaginatedListOfDataProcessingAgreements data, response status code and response headers
    def v1_data_agreements_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataProcessingAgreementsApi.v1_data_agreements_get ...'
      end
      # resource path
      local_var_path = '/v1/data-agreements'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_no'] = opts[:'page_no'] if !opts[:'page_no'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListOfDataProcessingAgreements'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"DataProcessingAgreementsApi.v1_data_agreements_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProcessingAgreementsApi#v1_data_agreements_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a data processing agreement this will not delete a published or a agreement in use with consents.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Boolean]
    def v1_data_agreements_id_delete(id, opts = {})
      data, _status_code, _headers = v1_data_agreements_id_delete_with_http_info(id, opts)
      data
    end

    # Delete a data processing agreement this will not delete a published or a agreement in use with consents.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def v1_data_agreements_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataProcessingAgreementsApi.v1_data_agreements_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProcessingAgreementsApi.v1_data_agreements_id_delete"
      end
      # resource path
      local_var_path = '/v1/data-agreements/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"DataProcessingAgreementsApi.v1_data_agreements_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProcessingAgreementsApi#v1_data_agreements_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get data processing agreement by id.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataProcessingAgreement]
    def v1_data_agreements_id_get(id, opts = {})
      data, _status_code, _headers = v1_data_agreements_id_get_with_http_info(id, opts)
      data
    end

    # Get data processing agreement by id.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataProcessingAgreement, Integer, Hash)>] DataProcessingAgreement data, response status code and response headers
    def v1_data_agreements_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataProcessingAgreementsApi.v1_data_agreements_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProcessingAgreementsApi.v1_data_agreements_id_get"
      end
      # resource path
      local_var_path = '/v1/data-agreements/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataProcessingAgreement'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"DataProcessingAgreementsApi.v1_data_agreements_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProcessingAgreementsApi#v1_data_agreements_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update data processing agreement.
    # @param id [String] 
    # @param update_data_processing_agreement [UpdateDataProcessingAgreement] 
    # @param [Hash] opts the optional parameters
    # @return [DataProcessingAgreement]
    def v1_data_agreements_id_put(id, update_data_processing_agreement, opts = {})
      data, _status_code, _headers = v1_data_agreements_id_put_with_http_info(id, update_data_processing_agreement, opts)
      data
    end

    # Update data processing agreement.
    # @param id [String] 
    # @param update_data_processing_agreement [UpdateDataProcessingAgreement] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataProcessingAgreement, Integer, Hash)>] DataProcessingAgreement data, response status code and response headers
    def v1_data_agreements_id_put_with_http_info(id, update_data_processing_agreement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataProcessingAgreementsApi.v1_data_agreements_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProcessingAgreementsApi.v1_data_agreements_id_put"
      end
      # verify the required parameter 'update_data_processing_agreement' is set
      if @api_client.config.client_side_validation && update_data_processing_agreement.nil?
        fail ArgumentError, "Missing the required parameter 'update_data_processing_agreement' when calling DataProcessingAgreementsApi.v1_data_agreements_id_put"
      end
      # resource path
      local_var_path = '/v1/data-agreements/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_data_processing_agreement)

      # return_type
      return_type = opts[:debug_return_type] || 'DataProcessingAgreement'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"DataProcessingAgreementsApi.v1_data_agreements_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProcessingAgreementsApi#v1_data_agreements_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Terminate a data processing agreement by id.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Boolean]
    def v1_data_agreements_id_terminate_put(id, opts = {})
      data, _status_code, _headers = v1_data_agreements_id_terminate_put_with_http_info(id, opts)
      data
    end

    # Terminate a data processing agreement by id.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def v1_data_agreements_id_terminate_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataProcessingAgreementsApi.v1_data_agreements_id_terminate_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProcessingAgreementsApi.v1_data_agreements_id_terminate_put"
      end
      # resource path
      local_var_path = '/v1/data-agreements/{id}/terminate'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"DataProcessingAgreementsApi.v1_data_agreements_id_terminate_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProcessingAgreementsApi#v1_data_agreements_id_terminate_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a data processing agreement.
    # @param create_data_processing_agreement [CreateDataProcessingAgreement] 
    # @param [Hash] opts the optional parameters
    # @return [DataProcessingAgreement]
    def v1_data_agreements_post(create_data_processing_agreement, opts = {})
      data, _status_code, _headers = v1_data_agreements_post_with_http_info(create_data_processing_agreement, opts)
      data
    end

    # Create a data processing agreement.
    # @param create_data_processing_agreement [CreateDataProcessingAgreement] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataProcessingAgreement, Integer, Hash)>] DataProcessingAgreement data, response status code and response headers
    def v1_data_agreements_post_with_http_info(create_data_processing_agreement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataProcessingAgreementsApi.v1_data_agreements_post ...'
      end
      # verify the required parameter 'create_data_processing_agreement' is set
      if @api_client.config.client_side_validation && create_data_processing_agreement.nil?
        fail ArgumentError, "Missing the required parameter 'create_data_processing_agreement' when calling DataProcessingAgreementsApi.v1_data_agreements_post"
      end
      # resource path
      local_var_path = '/v1/data-agreements'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_data_processing_agreement)

      # return_type
      return_type = opts[:debug_return_type] || 'DataProcessingAgreement'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"DataProcessingAgreementsApi.v1_data_agreements_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProcessingAgreementsApi#v1_data_agreements_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
